    // –í—Å–µ —Å–ª–æ–≤–∞ –≤ –æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    const allWords = [
        // –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É)
        { en: "applicant", ru: "–∫–∞–Ω–¥–∏–¥–∞—Ç, –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç, —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å", transcription: "" },
        { en: "career", ru: "–∫–∞—Ä—å–µ—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", transcription: "" },
        { en: "competencies", ru: "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞", transcription: "" },
        { en: "concise", ru: "–∫—Ä–∞—Ç–∫–∏–π (–ª–∞–∫–æ–Ω–∏—á–Ω—ã–π)", transcription: "" },
        { en: "cover letter", ru: "—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", transcription: "" },
        { en: "competitor", ru: "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç, —Å–æ–ø–µ—Ä–Ω–∏–∫", transcription: "" },
        { en: "confidence", ru: "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", transcription: "" },
        { en: "crucial", ru: "–≤–∞–∂–Ω—ã–π", transcription: "" },
        { en: "CV (Curriculum vitae)", ru: "—Ä–µ–∑—é–º–µ (–∫—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è)", transcription: "" },
        { en: "employee", ru: "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", transcription: "" },
        { en: "employer", ru: "—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", transcription: "" },
        { en: "experience", ru: "–æ–ø—ã—Ç", transcription: "" },
        { en: "HR (Human Resources)", ru: "–æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤", transcription: "" },
        { en: "interview", ru: "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", transcription: "" },
        { en: "job description", ru: "–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", transcription: "" },
        { en: "key achievements", ru: "–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", transcription: "" },
        { en: "marital status", ru: "—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", transcription: "" },
        { en: "position", ru: "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", transcription: "" },
        { en: "recruitment", ru: "–Ω–∞–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", transcription: "" },
        { en: "salary", ru: "–µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞, –æ–∫–ª–∞–¥", transcription: "" },
        { en: "to apply for a job", ru: "–ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É", transcription: "" },
        { en: "to be responsible for", ru: "–±—ã—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞", transcription: "" },
        { en: "to compete", ru: "–∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å", transcription: "" },
        { en: "to employ", ru: "–Ω–∞–Ω–∏–º–∞—Ç—å", transcription: "" },
        { en: "to fire", ru: "—É–≤–æ–ª—å–Ω—è—Ç—å", transcription: "" },
        { en: "to get a job", ru: "—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", transcription: "" },
        { en: "to offer", ru: "–ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å", transcription: "" },
        { en: "to qualify", ru: "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", transcription: "" },
        { en: "to require", ru: "—Ç—Ä–µ–±–æ–≤–∞—Ç—å", transcription: "" },
        { en: "vacancy", ru: "–≤–∞–∫–∞–Ω—Å–∏—è", transcription: "" }
    ];

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let currentLanguage = 'en';
    let darkMode = false;
    let testWords = [];
    let userAnswers = [];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ localStorage
        loadTheme();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
        initTabs();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        renderFlashcards();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
        initTest();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        document.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.toggle-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentLanguage = this.dataset.lang;
                renderFlashcards();
            });
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞
        document.getElementById('check-test').addEventListener('click', checkTest);
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        document.getElementById('new-test').addEventListener('click', initTest);
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);
    });

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã
    function loadTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            enableDarkMode();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    function toggleTheme() {
        if (darkMode) {
            disableDarkMode();
        } else {
            enableDarkMode();
        }
    }

    function enableDarkMode() {
        document.body.classList.add('dark-mode');
        document.getElementById('themeIcon').textContent = '‚òÄÔ∏è';
        document.getElementById('themeText').textContent = '–°–≤–µ—Ç–ª–∞—è';
        darkMode = true;
        localStorage.setItem('theme', 'dark');
    }

    function disableDarkMode() {
        document.body.classList.remove('dark-mode');
        document.getElementById('themeIcon').textContent = 'üåô';
        document.getElementById('themeText').textContent = '–¢—ë–º–Ω–∞—è';
        darkMode = false;
        localStorage.setItem('theme', 'light');
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–æ–∫
    function initTabs() {
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –≤–∫–ª–∞–¥–æ–∫
                document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ –∏ –≤–∫–ª–∞–¥–∫–µ
                this.classList.add('active');
                const tabId = this.dataset.tab;
                document.getElementById(tabId).classList.add('active');
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    function renderFlashcards() {
        const container = document.getElementById('flashcards-container');
        container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        allWords.forEach(word => {
            const card = document.createElement('div');
            card.className = 'flashcard';
            card.innerHTML = `
                <div class="flashcard-inner">
                    <div class="flashcard-front">
                        <div class="word">${currentLanguage === 'en' ? word.en : word.ru}</div>
                        <div class="transcription">${word.transcription}</div>
                        <div class="translation">${currentLanguage === 'en' ? "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥" : "Click to see in English"}</div>
                    </div>
                    <div class="flashcard-back">
                        <div class="word">${currentLanguage === 'en' ? word.ru : word.en}</div>
                        <div class="transcription">${word.transcription}</div>
                        <div class="translation">${currentLanguage === 'en' ? "–ü–µ—Ä–µ–≤–æ–¥" : "English"}</div>
                    </div>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            card.addEventListener('click', function() {
                this.classList.toggle('flipped');
            });
            
            container.appendChild(card);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞
    function initTest() {
        const container = document.getElementById('test-questions');
        container.innerHTML = '';
        userAnswers = [];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
        testWords = shuffleArray([...allWords]);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        testWords = testWords.slice(0, 10);
        
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        testWords.forEach((word, index) => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'test-question';
            questionDiv.innerHTML = `
                <p>${index + 1}. –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è "${word.en}"?</p>
                <div class="test-options" id="options-${index}"></div>
            `;
            container.appendChild(questionDiv);
            
            // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            const optionsContainer = document.getElementById(`options-${index}`);
            
            // –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
            const wrongOptions = shuffleArray(allWords
                .filter(w => w.ru !== word.ru)
                .map(w => w.ru))
                .slice(0, 3);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            const options = shuffleArray([...wrongOptions, word.ru]);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            options.forEach(option => {
                const optionBtn = document.createElement('div');
                optionBtn.className = 'test-option';
                optionBtn.textContent = option;
                optionBtn.dataset.index = index;
                optionBtn.dataset.option = option;
                optionBtn.addEventListener('click', function() {
                    selectTestOption(this, index, option === word.ru);
                });
                optionsContainer.appendChild(optionBtn);
            });
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        document.getElementById('test-progress').style.width = '0%';
        document.getElementById('test-result').classList.add('hidden');
    }

    // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Ç–µ—Å—Ç–µ
    function selectTestOption(element, questionIndex, isCorrect) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ
        const options = document.querySelectorAll(`#options-${questionIndex} .test-option`);
        options.forEach(opt => {
            opt.classList.remove('correct', 'incorrect', 'selected');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if (isCorrect) {
            element.classList.add('correct');
        } else {
            element.classList.add('incorrect');
            // –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            options.forEach(opt => {
                if (opt.dataset.option === testWords[questionIndex].ru) {
                    opt.classList.add('correct');
                }
            });
        }
        
        element.classList.add('selected');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userAnswers[questionIndex] = {
            isCorrect,
            userAnswer: element.dataset.option,
            correctAnswer: testWords[questionIndex].ru
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        updateTestProgress();
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∞
    function updateTestProgress() {
        const answered = userAnswers.filter(a => a !== undefined).length;
        const total = testWords.length;
        const progress = (answered / total) * 100;
        document.getElementById('test-progress').style.width = `${progress}%`;
    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞
    function checkTest() {
        const total = testWords.length;
        const correct = userAnswers.filter(a => a && a.isCorrect).length;
        const percentage = Math.round((correct / total) * 100);
        
        const resultDiv = document.getElementById('test-result');
        resultDiv.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${correct} –∏–∑ ${total} (${percentage}%)`;
        resultDiv.className = percentage >= 70 ? 'test-result good' : 'test-result bad';
        resultDiv.classList.remove('hidden');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    function shuffleArray(array) {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    }